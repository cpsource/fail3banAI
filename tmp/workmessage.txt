create a python3 class called WorkManager. It's job is to maintain a work queue where manager threads can enqueue work units called WorkUnit classes. Worker threads will wait for a WorkUnit to be enqueued, then a thread will remove the WorkUnit and execute it. Be sure to handle enque/dequeue in a thread-safe way with semaphores or whatever else is available in python3. WorkUnits typicaly contain a function to execute along with its argument list and a callback on completion. The WorkMAnager typically has an enqueue method that gets the lock for the queue, enques the WorkPacket, then releases the lock. The second method is a dequeue one. A worker thread will call this one when it is idle. The dequeue won't return until someone queues a work packet.
